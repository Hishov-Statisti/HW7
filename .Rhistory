mu1_mle <- sum(o_vec.Q2[1:m])/m
mu2_mle <- sum(o_vec.Q2[(m+1):10000])/(10000-m)
plot(density(o_vec.Q2[1:m]))
lines(density(o_vec.Q2[(m+1):10000]))
mu1_mle <- sum(o_vec.Q2[1:m])/m
mu2_mle <- sum(o_vec.Q2[(m+1):10000])/(10000-m)
mu1_mle
mu2_mle
# ex6data1 <- read.csv("C:/Users/Alon/Desktop/Studies/Statistics/Statistical_Computing/Exercises/HW6/ex6data1.csv")
ex7q2 <- read.csv("~/Desktop/Ran/D year/semester b/hishov statisti/exercies/HW7/ex7q2.csv")
grad_s <- function(mu1,mu2,sigma,m,o_vec){
n <- length(o_vec)
d_s_d_mu1 <- (sum(o_vec[1:m]) -  (m * mu1)) / (sigma^2)
d_s_d_mu2 <- (sum(o_vec[(m+1):n]) -  ((n - m) * mu2)) / (sigma^2)
return(matrix(data = c(d_s_d_mu1,d_s_d_mu2),nrow = 1,ncol = 2))
}
hesian.Q2 <- function(m,sigma,o_vec){
n <- length(o_vec)
s_d2_mu1 <-  - (m / (sigma^2))
s_d2_mu2 <- - ((n-m) / (sigma^2))
s_d_mu1_d_mu2 <- 0
return(matrix(data = c(s_d2_mu1,s_d_mu1_d_mu2,s_d_mu1_d_mu2,s_d2_mu2),nrow = 2,ncol = 2))
}
o_vec.Q2 <- ex7q2$o
mu1_h.j <- mu2_h.j <- mean(o_vec.Q2 ) # first guess
m <- 7659
sigma <- 2
counter <- 0
eps_for_break <- 10^-5
while (TRUE) {
counter <- counter+1
mus_h.j <- matrix(c(mu1_h.j,mu2_h.j),ncol = 1)
mus_h.j_1 <- mus_h.j - solve(hesian.Q2(m,sigma,o_vec.Q2)) %*% t(grad_s(mu1_h.j,mu2_h.j,sigma,m,o_vec.Q2))
mu1_h.j <- mus_h.j_1[1]
mu2_h.j <- mus_h.j_1[2]
if (max(abs(mus_h.j_1 - mus_h.j)) < eps_for_break) {break}
}
mu1_h.j
mu2_h.j
plot(density(o_vec.Q2[1:m]))
lines(density(o_vec.Q2[(m+1):10000]))
mu1_mle <- sum(o_vec.Q2[1:m])/m
mu2_mle <- sum(o_vec.Q2[(m+1):10000])/(10000-m)
mu1_mle
mu2_mle
mu1_mle <- sum(o_vec.Q2[1:m])/m
mu2_mle <- sum(o_vec.Q2[(m+1):10000])/(10000-m)
mu1_mle
mu2_mle
x_j_sum <- function(mu1_j,sigma,m,o_vec){
n <- length(o_vec)
sum.xj <-(sum(o_vec[1:m]) + sum((mu1_j - sigma * (dnorm( (o_vec-mu1_j) / sigma) /
pnorm ( (o_vec-mu1_j) / sigma)))[(m+1):n]))
return(sum.xj)
}
y_j_sum <- function(mu2_j,sigma,m,o_vec){
n <- length(o_vec)
sum.yj <-(sum((mu2_j - sigma * (dnorm( (o_vec-mu2_j) / sigma) /
(1-pnorm ( (o_vec-mu2_j) / sigma))))[1:m]) + sum(o_vec[(m+1):n]))
return(sum.yj)
}
# ex6data1 <- read.csv("C:/Users/Alon/Desktop/Studies/Statistics/Statistical_Computing/Exercises/HW6/ex6data1.csv")
ex7q2 <- read.csv("~/Desktop/Ran/D year/semester b/hishov statisti/exercies/HW7/ex7q2.csv")
x_j_sum <- function(mu1_j,sigma,m,o_vec){
n <- length(o_vec)
sum.xj <-(sum(o_vec[1:m]) + sum((mu1_j - sigma * (dnorm( (o_vec-mu1_j) / sigma) /
pnorm ( (o_vec-mu1_j) / sigma)))[(m+1):n]))
return(sum.xj)
}
y_j_sum <- function(mu2_j,sigma,m,o_vec){
n <- length(o_vec)
sum.yj <-(sum((mu2_j - sigma * (dnorm( (o_vec-mu2_j) / sigma) /
(1-pnorm ( (o_vec-mu2_j) / sigma))))[1:m]) + sum(o_vec[(m+1):n]))
return(sum.yj)
}
o_vec.Q2 <- ex7q2$o
mu1.j <- mu2.j <- mean(o_vec.Q2) # first guess
m <- 7659
sigma <- 2
n <- length(o_vec.Q2 )
eps_for_break <- 10^-5
mus_j_1 <- c(mu1.j,mu2.j)
while (TRUE) {
mus_j <- mus_j_1
mu1.j_1 <- x_j_sum(mu1.j,sigma,m,o_vec.Q2) / n
mu1.j_2 <- y_j_sum(mu1.j,sigma,m,o_vec.Q2) / n
mus_j_1 <- c(mu1.j_1,mu1.j_2)
if (max(abs(mus_j_1 - mus_j)) < eps_for_break) {break}
}
mu1.j_1
mu1.j_2
x_j_sum <- function(mu1_j,sigma,m,o_vec){
n <- length(o_vec)
sum.xj <-(sum(o_vec[1:m]) + sum((mu1_j - sigma * (dnorm( (o_vec-mu1_j) / sigma) /
pnorm ( (o_vec-mu1_j) / sigma)))[(m+1):n]))
return(sum.xj)
}
y_j_sum <- function(mu2_j,sigma,m,o_vec){
n <- length(o_vec)
sum.yj <-(sum((mu2_j - sigma * (dnorm( (o_vec-mu2_j) / sigma) /
(pnorm ( (o_vec-mu2_j) / sigma))))[1:m]) + sum(o_vec[(m+1):n]))
return(sum.yj)
}
o_vec.Q2 <- ex7q2$o
mu1.j <- mu2.j <- mean(o_vec.Q2) # first guess
m <- 7659
sigma <- 2
n <- length(o_vec.Q2 )
eps_for_break <- 10^-5
mus_j_1 <- c(mu1.j,mu2.j)
while (TRUE) {
mus_j <- mus_j_1
mu1.j_1 <- x_j_sum(mu1.j,sigma,m,o_vec.Q2) / n
mu1.j_2 <- y_j_sum(mu1.j,sigma,m,o_vec.Q2) / n
mus_j_1 <- c(mu1.j_1,mu1.j_2)
if (max(abs(mus_j_1 - mus_j)) < eps_for_break) {break}
}
mu1.j_1
mu1.j_2
x_j_sum <- function(mu1_j,sigma,m,o_vec){
n <- length(o_vec)
sum.xj <-(sum(o_vec[1:m]) + sum((mu1_j - sigma * (dnorm( (o_vec-mu1_j) / sigma) /
pnorm ( (o_vec-mu1_j) / sigma)))[(m+1):n]))
return(sum.xj)
}
y_j_sum <- function(mu2_j,sigma,m,o_vec){
n <- length(o_vec)
sum.yj <-(sum((mu2_j - sigma * (dnorm( (o_vec-mu2_j) / sigma) /
(1-pnorm ( (o_vec-mu2_j) / sigma))))[1:m]) + sum(o_vec[(m+1):n]))
return(sum.yj)
}
o_vec.Q2 <- ex7q2$o
mu1.j <- mu2.j <- mean(o_vec.Q2) # first guess
m <- 7659
sigma <- 2
n <- length(o_vec.Q2 )
eps_for_break <- 10^-5
mus_j_1 <- c(mu1.j,mu2.j)
while (TRUE) {
mus_j <- mus_j_1
mu1.j_1 <- x_j_sum(mu1.j,sigma,m,o_vec.Q2) / n
mu1.j_2 <- y_j_sum(mu1.j,sigma,m,o_vec.Q2) / n
mus_j_1 <- c(mu1.j_1,mu1.j_2)
if (max(abs(mus_j_1 - mus_j)) < eps_for_break) {break}
}
mu1.j_1
mu1.j_2
o_vec.Q2 <- ex7q2$o
mu1.j <- mu2.j <- mean(o_vec.Q2) # first guess
m <- 7659
sigma <- 2
n <- length(o_vec.Q2 )
eps_for_break <- 10^-5
mus_j_1 <- c(mu1.j,mu2.j)
while (TRUE) {
mus_j <- mus_j_1
mu1.j_1 <- x_j_sum(mus_j[1],sigma,m,o_vec.Q2) / n
mu1.j_2 <- y_j_sum(mus_j[2],sigma,m,o_vec.Q2) / n
mus_j_1 <- c(mu1.j_1,mu1.j_2)
if (max(abs(mus_j_1 - mus_j)) < eps_for_break) {break}
}
# ex6data1 <- read.csv("C:/Users/Alon/Desktop/Studies/Statistics/Statistical_Computing/Exercises/HW6/ex6data1.csv")
ex7q2 <- read.csv("~/Desktop/Ran/D year/semester b/hishov statisti/exercies/HW7/ex7q2.csv")
x_j_sum <- function(mu1_j,sigma,m,o_vec){
n <- length(o_vec)
sum.xj <-(sum(o_vec[1:m]) + sum((mu1_j - sigma * (dnorm( (o_vec-mu1_j) / sigma) /
pnorm ( (o_vec-mu1_j) / sigma)))[(m+1):n]))
return(sum.xj)
}
y_j_sum <- function(mu2_j,sigma,m,o_vec){
n <- length(o_vec)
sum.yj <-(sum((mu2_j - sigma * (dnorm( (o_vec-mu2_j) / sigma) /
(1-pnorm ( (o_vec-mu2_j) / sigma))))[1:m]) + sum(o_vec[(m+1):n]))
return(sum.yj)
}
o_vec.Q2 <- ex7q2$o
mu1.j <- mu2.j <- mean(o_vec.Q2) # first guess
m <- 7659
sigma <- 2
n <- length(o_vec.Q2 )
eps_for_break <- 10^-5
mus_j_1 <- c(mu1.j,mu2.j)
while (TRUE) {
mus_j <- mus_j_1
mu1.j_1 <- x_j_sum(mus_j[1],sigma,m,o_vec.Q2) / n
mu1.j_2 <- y_j_sum(mus_j[2],sigma,m,o_vec.Q2) / n
mus_j_1 <- c(mu1.j_1,mu1.j_2)
if (max(abs(mus_j_1 - mus_j)) < eps_for_break) {break}
}
x_j_sum <- function(mu1_j,sigma,m,o_vec){
n <- length(o_vec)
sum.xj <-(sum(o_vec[1:m]) + sum((mu1_j - sigma * (dnorm( (o_vec-mu1_j) / sigma) /
pnorm ( (o_vec-mu1_j) / sigma)))[(m+1):n]))
return(sum.xj)
}
y_j_sum <- function(mu2_j,sigma,m,o_vec){
n <- length(o_vec)
sum.yj <-(sum((mu2_j - sigma * (dnorm( (o_vec-mu2_j) / sigma) /
(pnorm ( (o_vec-mu2_j) / sigma))))[1:m]) + sum(o_vec[(m+1):n]))
return(sum.yj)
}
o_vec.Q2 <- ex7q2$o
mu1.j <- mu2.j <- mean(o_vec.Q2) # first guess
m <- 7659
sigma <- 2
n <- length(o_vec.Q2 )
eps_for_break <- 10^-5
mus_j_1 <- c(mu1.j,mu2.j)
while (TRUE) {
mus_j <- mus_j_1
mu1.j_1 <- x_j_sum(mus_j[1],sigma,m,o_vec.Q2) / n
mu1.j_2 <- y_j_sum(mus_j[2],sigma,m,o_vec.Q2) / n
mus_j_1 <- c(mu1.j_1,mu1.j_2)
if (max(abs(mus_j_1 - mus_j)) < eps_for_break) {break}
}
mu1.j_1
mu1.j_2
x <- ex7q1$frequencies..ni
y <- ex7q1$number.of.cases..i.
plot(y,x,type = "o",col = "red")
y_p <- rpois(n = 1500,lambda = lambda_hat.a)
table_y_p <- as.vector(table(y_p))
y_p_unique <- sort(unique((y_p)))
lines(y_p_unique,table_y_p, type = "o",col= "blue")
alpha_k1_numerator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M1j.k = (alpha.k) / ((alpha.k)+(beta.k*exp(-lambda1.k))+((1-alpha.k-beta.k)*exp(-lambda2.k)))
SUM.M1j.k = data_drugs[1,2] * M1j.k
return(SUM.M1j.k)
}
beta_k1_numerator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M2.k = rep(NA,17)
for (i in 1:17){
M2.k[i] = (beta.k*(lambda1.k^data_drugs[i,1])*exp(-lambda1.k))/
((alpha.k*as.numeric(data_drugs[i,1]==0))+(beta.k*(lambda1.k^data_drugs[i,1])*
exp(-lambda1.k))+((1-alpha.k-beta.k)*(lambda2.k^data_drugs[i,1])*exp(-lambda2.k)))
}
SUM.M2j.k = sum(data_drugs[,2]*M2.k)
return(SUM.M2j.k)
}
lambda1_k1_denominator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M2.k = rep(NA,17)
for (i in 1:17){
M2.k[i] = (beta.k*(lambda1.k^data_drugs[i,1])*exp(-lambda1.k))/
((alpha.k*as.numeric(data_drugs[i,1]==0))+(beta.k*(lambda1.k^data_drugs[i,1])*
exp(-lambda1.k))+((1-alpha.k-beta.k)*(lambda2.k^data_drugs[i,1])*exp(-lambda2.k)))
}
SUM.M2j.k = sum(data_drugs[,2]*M2.k)
return(SUM.M2j.k)
}
lambda2_k1_denominator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M3.k = rep(NA,17)
for (i in 1:17){
M3.k[i] = ((1-alpha.k-beta.k)*(lambda2.k^data_drugs[i,1])*exp(-lambda2.k))/
((alpha.k*as.numeric(data_drugs[i,1]==0))+(beta.k*(lambda1.k^data_drugs[i,1])*
exp(-lambda1.k))+((1-alpha.k-beta.k)*(lambda2.k^data_drugs[i,1])*exp(-lambda2.k)))
}
SUM.M3j.k = sum(data_drugs[,2]*M3.k)
return(SUM.M3j.k)
}
lambda1_k1_numerator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M2.k = rep(NA,17)
for (i in 1:17){
M2.k[i] = (beta.k*(lambda1.k^data_drugs[i,1])*exp(-lambda1.k))/
((alpha.k*as.numeric(data_drugs[i,1]==0))+(beta.k*(lambda1.k^data_drugs[i,1])*
exp(-lambda1.k))+((1-alpha.k-beta.k)*(lambda2.k^data_drugs[i,1])*exp(-lambda2.k)))
}
M2.k_Xj = rep(NA,17)
for(i in 1:17){
M2.k_Xj[i] = (data_drugs[i,1]*M2.k[i])
}
SUM.M2j.k_Xj = sum(data_drugs[,2]*M2.k_Xj)
return(SUM.M2j.k_Xj)
}
lambda2_k1_numerator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M3.k = rep(NA,17)
for (i in 1:17){
M3.k[i] = ((1-alpha.k-beta.k)*(lambda2.k^data_drugs[i,1])*exp(-lambda2.k))/
((alpha.k*as.numeric(data_drugs[i,1]==0))+(beta.k*(lambda1.k^data_drugs[i,1])*
exp(-lambda1.k))+((1-alpha.k-beta.k)*(lambda2.k^data_drugs[i,1])*exp(-lambda2.k)))
}
M3.k_Xj = rep(NA,17)
for(i in 1:17){
M3.k_Xj[i] = (data_drugs[i,1]*M3.k[i])
}
SUM.M3j.k_Xj = sum(data_drugs[,2]*M3.k_Xj)
return(SUM.M3j.k_Xj)
}
EM_algorithm <- function(alpha_0,beta_0,lambda1_0,lambda2_0,epsilon){
theta_k <- c(alpha_0,beta_0,lambda1_0,lambda2_0)
alpha_k1 <- alpha_k1_numerator(alpha_0,beta_0,lambda1_0,lambda2_0) / 1500
beta_k1 <- beta_k1_numerator(alpha_0,beta_0,lambda1_0,lambda2_0) / 1500
lambda1_k1 <- lambda1_k1_numerator(alpha_0,beta_0,lambda1_0,lambda2_0) /
lambda1_k1_denominator(alpha_0,beta_0,lambda1_0,lambda2_0)
lambda2_k1 <- lambda2_k1_numerator(alpha_0,beta_0,lambda1_0,lambda2_0) /
lambda2_k1_denominator(alpha_0,beta_0,lambda1_0,lambda2_0)
theta_k1 <- c(alpha_k1,beta_k1,lambda1_k1,lambda2_k1)
while(norm(theta_k1-theta_k,type = "2")>epsilon){
tetha_k <- theta_k1
alpha_k1 <- alpha_k1_numerator(tetha_k[1],tetha_k[2],tetha_k[3],tetha_k[4]) / 1500
beta_k1 <- beta_k1_numerator(tetha_k[1],tetha_k[2],tetha_k[3],tetha_k[4]) / 1500
lambda1_k1 <- lambda1_k1_numerator(tetha_k[1],tetha_k[2],tetha_k[3],tetha_k[4]) /
lambda1_k1_denominator(tetha_k[1],tetha_k[2],tetha_k[3],tetha_k[4])
lambda2_k1 <- lambda2_k1_numerator(tetha_k[1],tetha_k[2],tetha_k[3],tetha_k[4]) /
lambda2_k1_denominator(tetha_k[1],tetha_k[2],tetha_k[3],tetha_k[4])
theta_k1 <- c(alpha_k1,beta_k1,lambda1_k1,lambda2_k1)
}
return(cat(sprintf("alpha (EM) = %s", round(alpha_k1,5)),
sprintf("beta (EM) = %s", round(beta_k1,5)),
sprintf("lambda1 (EM) = %s", round(lambda1_k1,5)),
sprintf("lambda2 (EM) = %s", round(lambda2_k1,5)),
sep = "\n"))
}
result <- EM_algorithm(alpha = 1/3, beta = 1/3,lambda1 = 6.736,lambda2 = 11.85,epsilon = 3)
EM_algorithm <- function(epsilon, start){
theta.k = start
lambda1.kplus1 =  lambda1_k1_numerator(vec = theta.k) / lambda1_k1_denominator(vec = theta.k)
lambda2.kplus1 =  lambda2_k1_numerator(vec = theta.k) / lambda2_k1_denominator(vec = theta.k)
alpha.kplus1 = alpha_k1_numerator(vec = theta.k) / 1500
beta.kplus1 = beta_k1_numerator(vec = theta.k) / 1500
theta.kplus1 = c(lambda1.kplus1, lambda2.kplus1, alpha.kplus1, beta.kplus1)
while(norm(theta.kplus1-theta.k, type = "2")>epsilon)
{
theta.k = theta.kplus1
lambda1.kplus1 =  lambda1_k1_numerator(vec = theta.k) / lambda1_k1_denominator(vec = theta.k)
lambda2.kplus1 =  lambda2_k1_numerator(vec = theta.k) / lambda2_k1_denominator(vec = theta.k)
alpha.kplus1 = alpha_k1_numerator(vec = theta.k) / 1500
beta.kplus1 = beta_k1_numerator(vec = theta.k) / 1500
theta.kplus1 = c(lambda1.kplus1, lambda2.kplus1, alpha.kplus1, beta.kplus1)
}
return(cat(sprintf("alpha (EM) = %s", round(theta.kplus1[3],5)),
sprintf("beta (EM) = %s", round(theta.kplus1[4],5)),
sprintf("lambda1 (EM) = %s", round(theta.kplus1[1],5)),
sprintf("lambda2 (EM) = %s", round(theta.kplus1[2],5)),
sep = "\n"))
}
result <- EM_algorithm(epsilon = 0.1,start = c(6.736,11.85,1/3,1/3))
alpha_k1_numerator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M1j.k = (alpha.k) / ((alpha.k)+(beta.k*exp(-lambda1.k))+((1-alpha.k-beta.k)*exp(-lambda2.k)))
SUM.M1j.k = ex7q1[1,2] * M1j.k
return(SUM.M1j.k)
}
beta_k1_numerator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M2.k = rep(NA,17)
for (i in 1:17){
M2.k[i] = (beta.k*(lambda1.k^ex7q1[i,1])*exp(-lambda1.k))/
((alpha.k*as.numeric(ex7q1[i,1]==0))+(beta.k*(lambda1.k^ex7q1[i,1])*
exp(-lambda1.k))+((1-alpha.k-beta.k)*(lambda2.k^ex7q1[i,1])*exp(-lambda2.k)))
}
SUM.M2j.k = sum(ex7q1[,2]*M2.k)
return(SUM.M2j.k)
}
lambda1_k1_denominator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M2.k = rep(NA,17)
for (i in 1:17){
M2.k[i] = (beta.k*(lambda1.k^ex7q1[i,1])*exp(-lambda1.k))/
((alpha.k*as.numeric(ex7q1[i,1]==0))+(beta.k*(lambda1.k^ex7q1[i,1])*
exp(-lambda1.k))+((1-alpha.k-beta.k)*(lambda2.k^ex7q1[i,1])*exp(-lambda2.k)))
}
SUM.M2j.k = sum(ex7q1[,2]*M2.k)
return(SUM.M2j.k)
}
lambda2_k1_denominator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M3.k = rep(NA,17)
for (i in 1:17){
M3.k[i] = ((1-alpha.k-beta.k)*(lambda2.k^ex7q1[i,1])*exp(-lambda2.k))/
((alpha.k*as.numeric(ex7q1[i,1]==0))+(beta.k*(lambda1.k^ex7q1[i,1])*
exp(-lambda1.k))+((1-alpha.k-beta.k)*(lambda2.k^ex7q1[i,1])*exp(-lambda2.k)))
}
SUM.M3j.k = sum(ex7q1[,2]*M3.k)
return(SUM.M3j.k)
}
lambda1_k1_numerator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M2.k = rep(NA,17)
for (i in 1:17){
M2.k[i] = (beta.k*(lambda1.k^ex7q1[i,1])*exp(-lambda1.k))/
((alpha.k*as.numeric(ex7q1[i,1]==0))+(beta.k*(lambda1.k^ex7q1[i,1])*
exp(-lambda1.k))+((1-alpha.k-beta.k)*(lambda2.k^ex7q1[i,1])*exp(-lambda2.k)))
}
M2.k_Xj = rep(NA,17)
for(i in 1:17){
M2.k_Xj[i] = (ex7q1[i,1]*M2.k[i])
}
SUM.M2j.k_Xj = sum(data_drugs[,2]*M2.k_Xj)
return(SUM.M2j.k_Xj)
}
lambda2_k1_numerator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M3.k = rep(NA,17)
for (i in 1:17){
M3.k[i] = ((1-alpha.k-beta.k)*(lambda2.k^ex7q1[i,1])*exp(-lambda2.k))/
((alpha.k*as.numeric(ex7q1[i,1]==0))+(beta.k*(lambda1.k^ex7q1[i,1])*
exp(-lambda1.k))+((1-alpha.k-beta.k)*(lambda2.k^ex7q1[i,1])*exp(-lambda2.k)))
}
M3.k_Xj = rep(NA,17)
for(i in 1:17){
M3.k_Xj[i] = (ex7q1[i,1]*M3.k[i])
}
SUM.M3j.k_Xj = sum(ex7q1[,2]*M3.k_Xj)
return(SUM.M3j.k_Xj)
}
EM_algorithm <- function(epsilon, start){
theta.k = start
lambda1.kplus1 =  lambda1_k1_numerator(vec = theta.k) / lambda1_k1_denominator(vec = theta.k)
lambda2.kplus1 =  lambda2_k1_numerator(vec = theta.k) / lambda2_k1_denominator(vec = theta.k)
alpha.kplus1 = alpha_k1_numerator(vec = theta.k) / 1500
beta.kplus1 = beta_k1_numerator(vec = theta.k) / 1500
theta.kplus1 = c(lambda1.kplus1, lambda2.kplus1, alpha.kplus1, beta.kplus1)
while(norm(theta.kplus1-theta.k, type = "2")>epsilon)
{
theta.k = theta.kplus1
lambda1.kplus1 =  lambda1_k1_numerator(vec = theta.k) / lambda1_k1_denominator(vec = theta.k)
lambda2.kplus1 =  lambda2_k1_numerator(vec = theta.k) / lambda2_k1_denominator(vec = theta.k)
alpha.kplus1 = alpha_k1_numerator(vec = theta.k) / 1500
beta.kplus1 = beta_k1_numerator(vec = theta.k) / 1500
theta.kplus1 = c(lambda1.kplus1, lambda2.kplus1, alpha.kplus1, beta.kplus1)
}
return(cat(sprintf("alpha (EM) = %s", round(theta.kplus1[3],5)),
sprintf("beta (EM) = %s", round(theta.kplus1[4],5)),
sprintf("lambda1 (EM) = %s", round(theta.kplus1[1],5)),
sprintf("lambda2 (EM) = %s", round(theta.kplus1[2],5)),
sep = "\n"))
}
result <- EM_algorithm(epsilon = 0.1,start = c(6.736,11.85,1/3,1/3))
lambda1_k1_numerator <- function(vec){
lambda1.k = vec[1]
lambda2.k = vec[2]
alpha.k = vec[3]
beta.k = vec[4]
M2.k = rep(NA,17)
for (i in 1:17){
M2.k[i] = (beta.k*(lambda1.k^ex7q1[i,1])*exp(-lambda1.k))/
((alpha.k*as.numeric(ex7q1[i,1]==0))+(beta.k*(lambda1.k^ex7q1[i,1])*
exp(-lambda1.k))+((1-alpha.k-beta.k)*(lambda2.k^ex7q1[i,1])*exp(-lambda2.k)))
}
M2.k_Xj = rep(NA,17)
for(i in 1:17){
M2.k_Xj[i] = (ex7q1[i,1]*M2.k[i])
}
SUM.M2j.k_Xj = sum(ex7q1[,2]*M2.k_Xj)
return(SUM.M2j.k_Xj)
}
EM_algorithm <- function(epsilon, start){
theta.k = start
lambda1.kplus1 =  lambda1_k1_numerator(vec = theta.k) / lambda1_k1_denominator(vec = theta.k)
lambda2.kplus1 =  lambda2_k1_numerator(vec = theta.k) / lambda2_k1_denominator(vec = theta.k)
alpha.kplus1 = alpha_k1_numerator(vec = theta.k) / 1500
beta.kplus1 = beta_k1_numerator(vec = theta.k) / 1500
theta.kplus1 = c(lambda1.kplus1, lambda2.kplus1, alpha.kplus1, beta.kplus1)
while(norm(theta.kplus1-theta.k, type = "2")>epsilon)
{
theta.k = theta.kplus1
lambda1.kplus1 =  lambda1_k1_numerator(vec = theta.k) / lambda1_k1_denominator(vec = theta.k)
lambda2.kplus1 =  lambda2_k1_numerator(vec = theta.k) / lambda2_k1_denominator(vec = theta.k)
alpha.kplus1 = alpha_k1_numerator(vec = theta.k) / 1500
beta.kplus1 = beta_k1_numerator(vec = theta.k) / 1500
theta.kplus1 = c(lambda1.kplus1, lambda2.kplus1, alpha.kplus1, beta.kplus1)
}
return(cat(sprintf("alpha (EM) = %s", round(theta.kplus1[3],5)),
sprintf("beta (EM) = %s", round(theta.kplus1[4],5)),
sprintf("lambda1 (EM) = %s", round(theta.kplus1[1],5)),
sprintf("lambda2 (EM) = %s", round(theta.kplus1[2],5)),
sep = "\n"))
}
result <- EM_algorithm(epsilon = 0.1,start = c(6.736,11.85,1/3,1/3))
result <- EM_algorithm(epsilon = 0.0001,start = c(6.736,11.85,1/3,1/3))
